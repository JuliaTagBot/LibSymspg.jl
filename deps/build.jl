using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsymspg"], :libsymspg),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/unkcpz/SpglibBuilder/releases/download/v1.12.2a"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SpglibBuilder.v1.12.2.i686-linux-gnu.tar.gz", "06b668b3b6c8c86bb0516dd5526880774791b948ac04725a30d6225b4edec1e8"),
    MacOS(:x86_64) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-apple-darwin14.tar.gz", "533f1a15fb993ce2560a1fcd31669cb4253b9221b0e42c6c75a43d72dd0a15b1"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-linux-gnu.tar.gz", "ecd2f691ed7499f414e0d0da99060aed2545f7b63f3b9218157ee9f9f84f6cff"),
    FreeBSD(:x86_64) => ("$bin_prefix/SpglibBuilder.v1.12.2.x86_64-unknown-freebsd11.1.tar.gz", "a81c544d4437c9558a63a3436786678c18682f35ff1204a4d684a01d15f0761b"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
